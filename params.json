{"name":"Jasmine-intellij-idea-live-templates","body":"Jasmine is a behavior-driven development framework for testing your JavaScript code \\[Jasmine\\].\r\n\r\nThis is an IntelliJ IDEA Live Template for the Jasmine JavaScript BDD Framework and Jasmine JQuery extention.\r\n\r\n# About\r\n\r\nThis is are IntelliJ IDEA Live Templates for working with the Jasmine Framework. It contains two files. These files work with any JavaScript file as specified in the File Types.\r\n\r\n##Jasmine.xml\r\nThis is the main template for the Jasmine Framework\r\n\r\n##Jasmine_jquery.xml\r\nThis is the additional template for working with the Jasmine jquery extention. \r\n\r\n# Commands\r\nThe commands are delemited by <tab>. Hitting <tab> goes to the next $VALn$ where n is the number of tab presses until $END$ is reached. For instance typing in typing in ec<tab> will put you at $VAL0$ in `expect($VAL0$).toContain($VAL1$);$END$`. Hitting <tab> again will take you to $VAL1$ hitting <tab> one last time will take you to the $END$ from here tab becomes a tab character. \r\n\r\n## Jasmine Commands\r\n### aft \r\nAfter each\r\n\r\n\r\n``` javascript\r\nafterEach(function () {  \r\n\t$END$  \r\n});\r\n\r\n`````\r\n\r\n### any \r\nany\r\n\r\n\r\n``` javascript\r\njasmine.jasmine.any($VAL0$);$END$\r\n```\r\n\r\n### bef \r\nbefore each\r\n\r\n\r\n``` javascript\r\nbeforeEach(function () {  \r\n    $END$      \r\n});\r\n```\r\n\r\n### des \r\ndescribe jasmine\r\n\r\n\r\n``` javascript\r\ndescribe(\"$VAL0$\", function () {  \r\n    $END$  \r\n});\r\n```\r\n\r\n### ec\r\nexpect to contain\r\n\r\n\r\n``` javascript\r\nexpect($VAL0$).toContain($VAL1$);$END$\r\n```\r\n\r\n### ed\r\nexpect to be defined\r\n\r\n\r\n``` javascript\r\nexpect($VAL0$).toBeDefined();$END$\r\n```\r\n\r\n### ee\r\nexpect to equal\r\n\r\n\r\n``` javascript\r\nexpect($VAL0$).toEqual($VAL1$);$END$\r\n```\r\n\r\n### ef\r\nexpect to match\r\n\r\n\r\n``` javascript\r\nexpect($VAL0$).toBeFalsy();$END$\r\n```\r\n\r\n### en\r\nexpect to be null\r\n\r\n\r\n``` javascript\r\nexpect($VAL0$).toBeNull();$END$\r\n```\r\n\r\n### esc\r\nexpect was called\r\n\r\n\r\n``` javascript\r\nexpect($VAL0$).wasCalled();$END$\r\n```\r\n\r\n### escw\r\nexpect was called with\r\n\r\n\r\n``` javascript\r\nexpect($VAL0$).wasCalledWith($VAL1$);$END$\r\n```\r\n\r\n### et\r\nexpect to be truthy\r\n\r\n``` javascript\r\nexpect($VAL0$).toBeTruthy();$END$\r\n```\r\n\r\n### ex\r\nexpect\r\n\r\n``` javascript\r\nexpect($VAL0$)$END$;\r\n```\r\n\r\n### it\r\nit\r\n\r\n``` javascript\r\nit(\"$VAL0$\", function () {  \r\n    $END$  \r\n});\r\n```\r\n\r\n### notc\r\nexpect not to contain\r\n\r\n``` javascript\r\nexpect($VAL0$).not.toContain($VAL1$);$END$\r\n```\r\n\r\n### notd\r\nexpect not to be defined\r\n\r\n``` javascript\r\nexpect($VAL0$).not.toBeDefined();$END$\r\n```\r\n\r\n### note\r\nexpect not to equal\r\n\r\n``` javascript\r\nexpect($VAL0$).not.toEqual($VAL1$);$END$\r\n```\r\n\r\n### notf\r\nexpect not to be falsy\r\n\r\n``` javascript\r\nexpect($VAL0$).not.toBeFalsy();$END$\r\n```\r\n\r\n### notm\r\nexpect not to match\r\n\r\n``` javascript\r\nexpect($VAL0$).not.toMatch($VAL1$);$END$\r\n```\r\n\r\n### notn\r\nexpect not to be null\r\n\r\n``` javascript\r\nexpect($VAL0$).not.toBeNull();$END$\r\n```\r\n\r\n### notsc\r\nexpect was not called\r\n\r\n``` javascript\r\nexpect($VAL0$).wasNotCalled();$END$\r\n```\r\n\r\n### notscw\r\nexpect was not called with\r\n\r\n``` javascript\r\nexpect($VAL0$).wasNotCalledWith($VAL1$);$END$\r\n```\r\n\r\n### nott\r\nexpect not to be truthy\r\n\r\n``` javascript\r\nexpect($VAL0$).not.toBeTruthy();$END$\r\n```\r\n\r\n### notx\r\nexpect not\r\n\r\n``` javascript\r\nexpect($VAL0$).not$END$;\r\n```\r\n\r\n### runs\r\nruns\r\n\r\n``` javascript\r\nruns(function () {  \r\n    $END$  \r\n});\r\n```\r\n\r\n### s\r\nspy on\r\n\r\n``` javascript\r\nspyOn($VAL0$, \"$VAL1$\")$END$;\r\n```\r\n\r\n### scf\r\nspy on and call fake\r\n\r\n``` javascript\r\nspyOn($VAL0$, \"$VAL1$\").andCallFake($VAL2$);$END$\r\n```\r\n\r\n### sct\r\nspy on and call through\r\n\r\n``` javascript\r\nspyOn($VAL0$, \"$VAL1$\").andCallThrough();$END$\r\n```\r\n\r\n### sr\r\nspy on and return\r\n\r\n``` javascript\r\nspyOn($VAL0$, \"$VAL1$\").andReturn($VAL2$);$END$\r\n```\r\n\r\n### st\r\nspy on and throw\r\n\r\n``` javascript\r\nspyOn($VAL0$, \"$VAL1$\").andThrow($VAL2$);$END$\r\n```\r\n\r\n### wa\r\nwaits\r\n\r\n``` javascript\r\nwaits($VAL0$);$END$\r\n```\r\n\r\n## Jasmine-Jquery\r\n\r\n### eb\r\nexpect to be\r\n\r\n``` javascript\r\nexpect($VAL0$).toBe($VAL1$);$END$\r\n```\r\n\r\n### ebc\r\nexpect to be checked\r\n\r\n``` javascript\r\nexpect($VAL0$).toBeChecked();$END$\r\n```\r\n\r\n### lf\r\nload fixutre\r\n\r\n``` javascript\r\nloadFixtures($VAL0$);$END$\r\n```\r\n\r\n### rf\r\nread fixture\r\n\r\n``` javascript\r\nreadFixture($VAL0$);$END$\r\n```\r\n\r\n### sf\r\nset fixture\r\n\r\n``` javascript\r\nsetFixture($VAL0$);$END$\r\n```\r\n\r\n\r\n\r\n# More\r\n\r\n * \\[1\\][Jasmine](http://github.com/pivotal/jasmine)\r\n * \\[2\\][Jasmine Text Mate bundle](https://github.com/pivotal/jasmine-tmbundle)\r\n * \\[3\\][Jasmine JQuery](https://github.com/velesin/jasmine-jquery)\r\n\r\n\r\n# Live Template Installation\r\n## Mac OS X\r\nCopy the xml file to \"~/Library/Preferences/IntelliJIdea11/templates/\"\r\n\r\n","tagline":"Live Templates for working with Jasmine BDD. Closely goes with functionality in the TextMate bundle provided by pivotal","google":"UA-31893326-1","note":"Don't delete this file! It's used internally to help with page regeneration."}